import { Indexable, NodeGeometry } from '@timohausmann/quadtree-ts';
import { EventCategory, EventListenerRegistry } from '../canvas/event_listener_registry';
import { RenderContextData, ColorStyle, GlobalCompositeOperation, LineCap, LineJoin, TextAlign, TextBaseline } from '../util/render';
import Flatten from '@flatten-js/core';
export declare abstract class Entity implements Indexable {
    protected ctx: RenderContextData;
    protected eventListenerRegistry?: EventListenerRegistry;
    data?: any;
    constructor(data?: any, ctx?: RenderContextData);
    abstract get rotation(): number;
    abstract set rotation(value: number);
    abstract get points(): Flatten.Point[];
    protected abstract set points(value: Flatten.Point[]);
    abstract get position(): Flatten.Point;
    abstract set position(value: Flatten.Point);
    abstract translate(by: Flatten.Vector): Flatten.Point;
    abstract translateX(by: number): Flatten.Point;
    abstract translateY(by: number): Flatten.Point;
    abstract rotate(by: number): number;
    abstract shape(): Flatten.Shape;
    abstract qtIndex(node: NodeGeometry): number[];
    intersects(other: Entity): boolean;
    isListening(): boolean;
    attachEventRegistry(registry: EventListenerRegistry): void;
    on(category: EventCategory, listener: EventListener): void;
    onCustom(name: string, listener: EventListener): void;
    detach(category: EventCategory): void;
    detachCustom(name: string): void;
    dispatch(name: string, event: Event): void;
    abstract render(ctx: CanvasRenderingContext2D): void;
    __friend_canvas_getEntityContext(): RenderContextData;
    get fillStyle(): ColorStyle;
    set fillStyle(value: ColorStyle);
    get font(): string;
    set font(value: string);
    get globalAlpha(): number;
    set globalAlpha(value: number);
    get globalCompositeOperation(): GlobalCompositeOperation;
    set globalCompositeOperation(value: GlobalCompositeOperation);
    get imageSmoothingEnabled(): boolean;
    set imageSmoothingEnabled(value: boolean);
    get lineCap(): LineCap;
    set lineCap(value: LineCap);
    get lineDashOffset(): number;
    set lineDashOffset(value: number);
    get lineJoin(): LineJoin;
    set lineJoin(value: LineJoin);
    get lineWidth(): number;
    set lineWidth(value: number);
    get miterLimit(): number;
    set miterLimit(value: number);
    get shadowBlur(): number;
    set shadowBlur(value: number);
    get shadowColor(): string;
    set shadowColor(value: string);
    get shadowOffsetX(): number;
    set shadowOffsetX(value: number);
    get shadowOffsetY(): number;
    set shadowOffsetY(value: number);
    get strokeStyle(): ColorStyle;
    set strokeStyle(value: ColorStyle);
    get textAlign(): TextAlign;
    set textAlign(value: TextAlign);
    get textBaseline(): TextBaseline;
    set textBaseline(value: TextBaseline);
}
